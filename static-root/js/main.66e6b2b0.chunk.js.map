{"version":3,"sources":["logo.svg","lookup/components.js","tweets/lookup.js","tweets/buttons.js","profiles/components.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/feed.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","console","log","open","setRequestHeader","onload","status","response","detail","window","location","href","indexOf","onerror","send","apiTweetFeed","nextUrl","undefined","replace","apiTweetList","username","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","type","handleActionBackendEvent","onClick","event","preventDefault","tweetId","id","apiTweetAction","UserLink","children","UserDisplay","user","nameDisplay","includeFullName","first_name","last_name","Fragment","UserPicture","ParentTweet","parent","Tweet","isRetweet","retweeter","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","setNextUrl","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","next","results","alert","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","onSubmit","newVal","current","value","ref","required","FeedList","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","e","createElement","tweetsEl","dataset","tweetFeedEl","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.66e6b2b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data) {\n    let jsonData;\n    if (data) {\n        jsonData = JSON.stringify(data)\n    }\n\n    const xhr = new XMLHttpRequest();\n    const url = `http://localhost:8000/api${endpoint}`;\n    xhr.responseType = 'json';\n    const csrftoken = getCookie('csrftoken');\n    console.log(csrftoken)\n    xhr.open(method, url);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    if (csrftoken) {\n        // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\");\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n    }\n    xhr.onload = function () {\n        if (xhr.status === 403) {\n            const detail = xhr.response.detail;\n            if (detail === \"Authentication credentials were not provided.\") {\n                if (window.location.href.indexOf('login') === -1) {\n                    window.location.href = \"/login?showLoginRequired=true\"\n\n                }\n            }\n        }\n        callback(xhr.response, xhr.status)\n    };\n\n    xhr.onerror = function () {\n        callback({\"message\": \"There was an error with the request\"}, 400)\n\n    };\n    xhr.send(jsonData)\n\n}\n\n","import {backendLookup} from \"../lookup\";\n\nexport function apiTweetFeed(callback, nextUrl) {\n    let endpoint = '/tweets/feed/';\n    if(nextUrl !== null && nextUrl !== undefined) {\n         endpoint = nextUrl.replace('http://localhost:8000/api', '')\n    }\n    backendLookup('GET', endpoint, callback)\n}\n\nexport function apiTweetCreate(newTweet, callback) {\n    backendLookup('POST', '/tweets/create/', callback, {content: newTweet})\n}\n\nexport function apiTweetAction(tweetId, action, callback) {\n    const data = {id: tweetId, action: action};\n    backendLookup('POST', '/tweets/action/', callback, data)\n}\n\n\nexport function apiTweetDetail(tweetId, callback) {\n    backendLookup('GET', `/tweets/${tweetId}/`, callback)\n}\n\nexport function apiTweetList(username, callback, nextUrl) {\n\n    let endpoint = '/tweets/';\n    if(username) {\n        endpoint = `/tweets?username=${username}`\n    }\n    if(nextUrl !== null && nextUrl !== undefined) {\n         endpoint = nextUrl.replace('http://localhost:8000/api', '')\n    }\n    backendLookup('GET', endpoint, callback)\n}","import {apiTweetAction} from \"./lookup\";\nimport React from \"react\";\n\nexport function ActionBtn(props) {\n    const {tweet, action, didPerformAction} = props;\n    const likes = tweet.likes ? tweet.likes : 0;\n    const className = props.className ? props.className : 'btn btn-primary btn-sm';\n    const actionDisplay = action.display ? action.display : 'Action';\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : action.display;\n\n    const handleActionBackendEvent = (response, status) => {\n        console.log(response, status);\n        if ((status === 200 || status === 201) && didPerformAction) {\n            //setLikes(response.likes)\n            didPerformAction(response, status)\n        }\n    };\n\n    const handleClick = (event) => {\n        event.preventDefault();\n        apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\n\n\n    };\n    return <button className={className} onClick={handleClick}>{display}</button>\n}\n","import React from \"react\";\n\nexport function UserLink(props) {\n    const {username} = props;\n    const handleUserLink = (event) => {\n        window.location.href = `/profiles/${username}`\n    };\n\n    return <span className={'pointer'} onClick={handleUserLink}>\n        {props.children}\n    </span>\n}\n\nexport function UserDisplay(props) {\n    const {user, includeFullName} = props;\n    const nameDisplay = includeFullName === true ? `${user.first_name} ${user.last_name} ` : null;\n\n    return <React.Fragment>\n        {nameDisplay}\n        <UserLink username={user.username}>@{user.username}</UserLink>\n    </React.Fragment>\n}\n\nexport function UserPicture(props) {\n    const {user} = props;\n    return <UserLink username={user.username}><span className={' mx-1 px-3 py-2 rounded-circle bg-dark text-white'}>\n                    {user.username[0]}\n    </span></UserLink>\n}\n\n","import React, {useState} from \"react\";\nimport {ActionBtn} from \"./buttons\";\nimport {UserDisplay, UserPicture} from \"../profiles\";\n\nexport function ParentTweet(props) {\n    const {tweet} = props;\n    return tweet.parent ?\n        <Tweet isRetweet retweeter={props.retweeter} hideActions className={' '} tweet={tweet.parent}/> : null\n}\n\nexport function Tweet(props) {\n    const {tweet, didRetweet, hideActions, isRetweet, retweeter} = props;\n    // writing tweet instead of props.tweet should also work\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null);\n    let className = props.className ? props.className : 'col-10 mx-auto col-md-6';\n\n    className = isRetweet === true ? `${className} p-2 border rounded` : className\n    const path = window.location.pathname;\n    const match = path.match(/(?<tweetid>\\d+)/);\n    const urlTweetId = match ? match.groups.tweetid : -1;\n\n    const isDetail = `${tweet.id}` === `${urlTweetId}`;\n\n    const handlePerformAction = (newActionTweet, status) => {\n        if (status === 200) {\n            setActionTweet(newActionTweet)\n\n        } else if (status === 201) {\n            // let the tweet list know\n            if (didRetweet) {\n                didRetweet(newActionTweet)\n\n            }\n        }\n    };\n\n    const handleLink = (event) => {\n        event.preventDefault();\n        window.location.href = `/${tweet.id}`\n    };\n\n    return <div className={className}>\n        {isRetweet === true && <div className={'mb-2'}>\n            <span className={'small text-muted '}>Retweet via <UserDisplay user={retweeter}/></span>\n        </div>}\n\n        <div className={'d-flex'}>\n\n            <div className={''}>\n                <UserPicture user={tweet.user}/>\n\n            </div>\n            <div className={'col-11'}>\n                <div>\n                    <p>\n                        <UserDisplay includeFullName user={tweet.user}/>\n                    </p>\n                    <p>{tweet.content}</p>\n                    <ParentTweet tweet={tweet} retweeter={tweet.user}/>\n                </div>\n                <div className={'btn btn-group px-0'}>\n                    {(actionTweet && hideActions !== true) && <React.Fragment>\n                        <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction}\n                                   action={{type: 'like', display: \"Likes\"}}/>\n                        <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction}\n                                   action={{type: 'unlike', display: \"Unlike\"}}/>\n                        <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction}\n                                   action={{type: 'retweet', display: \"Retweet\"}}/>\n                    </React.Fragment>}\n                    {isDetail === true ? null :\n                        <button className={'btn btn-outline-primary btn-sm'} onClick={handleLink}>View</button>}\n                </div>\n            </div>\n\n        </div>\n    </div>\n}\n\n","import React, {useEffect, useState} from \"react\";\nimport {apiTweetList} from \"./lookup\";\nimport {Tweet} from \"./detail\";\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([]);\n    const [tweets, setTweets] = useState([]);\n    const [nextUrl, setNextUrl] = useState(null);\n    const [tweetsDidSet, setTweetsDidSet] = useState(false);\n\n\n    useEffect(() => {\n        const final = [...props.newTweets.concat(tweetsInit)];\n        if (final.length !== tweets.length) {\n            setTweets(final)\n        }\n\n    }, [props.newTweets, tweets, tweetsInit]);\n\n    useEffect(() => {\n        if (tweetsDidSet === false) {\n            const handleTweetListLookup = (response, status) => {\n                if (status === 200) {\n                    setNextUrl(response.next);\n                    setTweetsInit(response.results);\n                    setTweetsDidSet(true)\n                } else {\n                    console.log(response);\n                    alert(\"There was an error\")\n                }\n            };\n            apiTweetList(props.username, handleTweetListLookup)\n\n        }\n\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\n\n    // Update both states to work with create tweet and retweet\n    const handleDidRetweet = (newTweet) => {\n        const updateTweetsInit = [...tweetsInit];\n        updateTweetsInit.unshift(newTweet);\n        setTweetsInit(updateTweetsInit);\n        const updateFinalTweets = [...tweets];\n        updateFinalTweets.unshift(tweets);\n        setTweets(updateFinalTweets)\n\n    };\n\n    const handleLoadNext = (event) => {\n        event.preventDefault();\n        if (nextUrl !== null) {\n            const handleLoadNextResponse = (response, status) => {\n                if (status === 200) {\n                    setNextUrl(response.next);\n                    const newTweets = [...tweets].concat(response.results);\n                    setTweetsInit(newTweets);\n                    setTweets(newTweets);\n                } else {\n                    alert(\"There was an error\")\n                }\n\n\n            };\n            apiTweetList(props.username, handleLoadNextResponse, nextUrl)\n        }\n\n\n    };\n\n    return <React.Fragment>\n        {tweets.map((item, index) => {\n            return <Tweet\n                tweet={item}\n                didRetweet={handleDidRetweet}\n                className='my-5 py-5 border bg-white text-dark'\n                key={`${index} - ${item.id}`}/>\n        })}\n\n        {nextUrl !== null && <button onClick={handleLoadNext} className={'btn btn-outline-primary'}>Load Next</button>}\n    </React.Fragment>\n\n\n}","import React from \"react\";\nimport {apiTweetCreate} from \"./lookup\";\n\nexport function TweetCreate(props) {\n    const textAreaRef = React.createRef();\n    const {didTweet} = props;\n\n    const handleBackendUpdate = (response, status) => {\n        // backend api response handler\n        if (status === 201) {\n            didTweet(response)\n\n        } else {\n            console.log(response);\n            alert(\"An error occurred. Please try again.\")\n        }\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const newVal = textAreaRef.current.value;\n\n        // backend api request\n        apiTweetCreate(newVal, handleBackendUpdate);\n\n        textAreaRef.current.value = ' '\n    };\n\n    return <div className={props.className}>\n        <form onSubmit={handleSubmit}>\n             <textarea ref={textAreaRef} required={true} className={'form-control'} name={'tweet'}>\n\n            </textarea>\n            <button type={'submit'} className={'btn btn-primary my-3'}>Tweet</button>\n\n        </form>\n    </div>\n}\n","import React, {useEffect, useState} from \"react\";\nimport {apiTweetFeed} from \"./lookup\";\nimport {Tweet} from \"./detail\";\n\nexport function FeedList(props) {\n    const [tweetsInit, setTweetsInit] = useState([]);\n    const [tweets, setTweets] = useState([]);\n    const [nextUrl, setNextUrl] = useState(null);\n    const [tweetsDidSet, setTweetsDidSet] = useState(false);\n\n\n    useEffect(() => {\n        const final = [...props.newTweets.concat(tweetsInit)];\n        if (final.length !== tweets.length) {\n            setTweets(final)\n        }\n\n    }, [props.newTweets, tweets, tweetsInit]);\n\n    useEffect(() => {\n        if (tweetsDidSet === false) {\n            const handleTweetListLookup = (response, status) => {\n                if (status === 200) {\n                    setNextUrl(response.next);\n                    setTweetsInit(response.results);\n                    setTweetsDidSet(true)\n                }\n            };\n            apiTweetFeed(handleTweetListLookup)\n\n        }\n\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\n\n    // Update both states to work with create tweet and retweet\n    const handleDidRetweet = (newTweet) => {\n        const updateTweetsInit = [...tweetsInit];\n        updateTweetsInit.unshift(newTweet);\n        setTweetsInit(updateTweetsInit);\n        const updateFinalTweets = [...tweets];\n        updateFinalTweets.unshift(tweets);\n        setTweets(updateFinalTweets)\n\n    };\n\n    const handleLoadNext = (event) => {\n        event.preventDefault();\n        if (nextUrl !== null) {\n            const handleLoadNextResponse = (response, status) => {\n                if (status === 200) {\n                    setNextUrl(response.next);\n                    const newTweets = [...tweets].concat(response.results);\n                    setTweetsInit(newTweets);\n                    setTweets(newTweets);\n                }\n\n            };\n            apiTweetFeed(props.username, handleLoadNextResponse, nextUrl)\n        }\n\n\n    };\n\n    return <React.Fragment>\n        {tweets.map((item, index) => {\n            return <Tweet\n                tweet={item}\n                didRetweet={handleDidRetweet}\n                className='my-5 py-5 border bg-white text-dark'\n                key={`${index} - ${item.id}`}/>\n        })}\n\n        {nextUrl !== null && <button onClick={handleLoadNext} className={'btn btn-outline-primary'}>Load Next</button>}\n    </React.Fragment>\n\n\n}","import React, {useEffect, useState} from \"react\";\nimport {apiTweetDetail} from \"./lookup\";\nimport {TweetsList} from \"./list\";\nimport {TweetCreate} from \"./create\";\nimport {Tweet} from \"./detail\";\nimport {FeedList} from \"./feed\"\n\nexport function FeedComponent(props) {\n\n    const [newTweets, setNewTweets] = useState([]);\n\n    const canTweet = props.canTweet === 'false' ? false : true;\n\n    const handleBackendUpdate = (response, status) => {\n        // backend api response handler\n        let tempNewTweets = [...newTweets];\n        tempNewTweets.unshift(response);\n        setNewTweets(tempNewTweets)\n    };\n\n    return <div className={props.className}>\n        {canTweet === true &&\n        <TweetCreate didTweet={handleBackendUpdate} className={'col-12 mb-3'}/>}\n        {/*pass all props from this component*/}\n        <FeedList  newTweets={newTweets} {...props}/>\n\n    </div>\n}\n\nexport function TweetsComponent(props) {\n\n    const [newTweets, setNewTweets] = useState([]);\n\n    const canTweet = props.canTweet === 'false' ? false : true;\n\n    const handleBackendUpdate = (response, status) => {\n        // backend api response handler\n        let tempNewTweets = [...newTweets];\n        tempNewTweets.unshift(response);\n        setNewTweets(tempNewTweets)\n    };\n\n    return <div className={props.className}>\n        {canTweet === true &&\n        <TweetCreate didTweet={handleBackendUpdate} className={'col-12 mb-3'}/>}\n        {/*pass all props from this component*/}\n        <TweetsList newTweets={newTweets} {...props}/>\n\n    </div>\n}\n\nexport function TweetDetailComponent(props) {\n    const {tweetId} = props;\n    const [didLookup, setDidLookup] = useState(false);\n    const [tweet, setTweet] = useState(null)\n\n\n    const handleBackendLookup = (response, status) => {\n        if(status === 200) {\n            setTweet(response)\n        } else {\n            alert(\"There was an error finding your tweet.\")\n        }\n    };\n\n    useEffect(() => {\n        if (didLookup === false) {\n            apiTweetDetail(tweetId, handleBackendLookup);\n            setDidLookup(true)\n        }\n\n    }, [tweetId, didLookup, setDidLookup]);\n\n    return tweet === null ? null : <Tweet tweet={tweet} className={props.className}/>\n\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from \"./tweets\";\n\n\nfunction App() {\n\n    return (\n        <div>\n            <TweetsComponent/>\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    <p>\n                        Edit <code>src/App.js</code> and save to reload.\n                    </p>\n\n                    <a\n                        className=\"App-link\"\n                        href=\"https://reactjs.org\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        Learn React\n                    </a>\n                </header>\n            </div>\n        </div>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {FeedComponent, TweetsComponent, TweetDetailComponent} from \"./tweets\";\n\nconst appEl = document.getElementById('root');\nif(appEl) {\n    ReactDOM.render(<App/>, appEl);\n}\n\n// this way we pass all dataset elements to props, not just 1 by 1\nconst e = React.createElement;\nconst tweetsEl = document.getElementById('tweetme');\nif(tweetsEl) {\n    ReactDOM.render(e(TweetsComponent, tweetsEl.dataset), tweetsEl);\n}\n\nconst tweetFeedEl  = document.getElementById('tweetme-feed');\nif(tweetsEl) {\n    ReactDOM.render(e(FeedComponent, tweetFeedEl.dataset), tweetFeedEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-detail\");\ntweetDetailElements.forEach(container => {\n         ReactDOM.render(e(TweetDetailComponent, container.dataset), container);\n\n});\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
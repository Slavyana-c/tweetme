{"version":3,"sources":["logo.svg","lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","console","log","open","setRequestHeader","onload","status","response","detail","window","location","href","onerror","send","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","type","handleActionBackendEvent","onClick","event","preventDefault","tweetId","id","apiTweetAction","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","Fragment","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","username","apiTweetList","alert","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","onSubmit","newVal","current","value","ref","required","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","e","createElement","tweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ef612ed2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data) {\n    let jsonData;\n    if (data) {\n        jsonData = JSON.stringify(data)\n    }\n\n    const xhr = new XMLHttpRequest();\n    const url = `http://localhost:8000/api${endpoint}`;\n    xhr.responseType = 'json';\n    const csrftoken = getCookie('csrftoken');\n    console.log(csrftoken)\n    xhr.open(method, url);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    if (csrftoken) {\n        // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\");\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n    }\n    xhr.onload = function () {\n        if(xhr.status === 403) {\n            const detail = xhr.response.detail;\n            if(detail === \"Authentication credentials were not provided.\") {\n                window.location.href = \"/login?showLoginRequired=true\"\n            }\n        }\n        callback(xhr.response, xhr.status)\n    };\n\n    xhr.onerror = function () {\n        callback({\"message\": \"There was an error with the request\"}, 400)\n\n    };\n    xhr.send(jsonData)\n\n}\n\n","import {apiTweetAction} from \"./lookup\";\nimport React from \"react\";\n\nexport function ActionBtn(props) {\n    const {tweet, action, didPerformAction} = props;\n    const likes = tweet.likes ? tweet.likes : 0;\n    const className = props.className ? props.className : 'btn btn-primary btn-sm';\n    const actionDisplay = action.display ? action.display : 'Action';\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : action.display;\n\n    const handleActionBackendEvent = (response, status) => {\n        console.log(response, status);\n        if ((status === 200 || status === 201) && didPerformAction) {\n            //setLikes(response.likes)\n            didPerformAction(response, status)\n        }\n    };\n\n    const handleClick = (event) => {\n        event.preventDefault();\n        apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\n\n\n    };\n    return <button className={className} onClick={handleClick}>{display}</button>\n}\n","import {backendLookup} from \"../lookup\";\n\nexport function apiTweetCreate(newTweet, callback) {\n    backendLookup('POST', '/tweets/create/', callback, {content: newTweet})\n}\n\nexport function apiTweetAction(tweetId, action, callback) {\n    const data = {id: tweetId, action: action};\n    backendLookup('POST', '/tweets/action/', callback, data)\n}\n\n\nexport function apiTweetDetail(tweetId, callback) {\n    backendLookup('GET', `/tweets/${tweetId}/`, callback)\n}\n\nexport function apiTweetList(username, callback) {\n\n    let endpoint = '/tweets/';\n    if(username) {\n        endpoint = `/tweets?username=${username}`\n    }\n    backendLookup('GET', endpoint, callback)\n}","import React, {useState} from \"react\";\nimport {ActionBtn} from \"./buttons\";\n\nexport function ParentTweet(props) {\n\n    const {tweet} = props;\n    return tweet.parent ? <div className={'row'}>\n        <div className={'col-11 mx-auto p-3 border rounded'}>\n            <p className={'mb-0 text-muted small'}>Retweet</p>\n            <Tweet hideActions className={' '} tweet={tweet.parent}/>\n        </div>\n    </div> : null\n}\n\n\nexport function Tweet(props) {\n    const {tweet, didRetweet, hideActions} = props;\n    // writing tweet instead of props.tweet should also work\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null);\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6';\n\n\n    const path = window.location.pathname;\n    const match = path.match(/(?<tweetid>\\d+)/);\n    const urlTweetId = match ? match.groups.tweetid : -1\n\n    const isDetail = `${tweet.id}` === `${urlTweetId}`\n\n    const handlePerformAction = (newActionTweet, status) => {\n        if (status === 200) {\n            setActionTweet(newActionTweet)\n\n        } else if (status === 201) {\n            // let the tweet list know\n            if (didRetweet) {\n                didRetweet(newActionTweet)\n\n            }\n        }\n    };\n\n    const handleLink = (event) => {\n        event.preventDefault()\n        window.location.href = `/${tweet.id}`\n    }\n\n\n    return <div className={className}>\n        <div>\n            <p>{tweet.id} - {tweet.content}</p>\n\n            <ParentTweet tweet={tweet}/>\n        </div>\n        <div className={'btn btn-group'}>\n            {(actionTweet && hideActions !== true) && <React.Fragment>\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction}\n                           action={{type: 'like', display: \"Likes\"}}/>\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction}\n                           action={{type: 'unlike', display: \"Unlike\"}}/>\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction}\n                           action={{type: 'retweet', display: \"Retweet\"}}/>\n            </React.Fragment>}\n            {isDetail === true ? null :\n                <button className={'btn btn-outline-primary btn-sm'} onClick={handleLink}>View</button>}\n        </div>\n\n    </div>\n}\n\n","import React, {useEffect, useState} from \"react\";\nimport {apiTweetList} from \"./lookup\";\nimport {Tweet} from \"./detail\";\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([]);\n    const [tweets, setTweets] = useState([]);\n    const [tweetsDidSet, setTweetsDidSet] = useState(false);\n\n\n    useEffect(() => {\n        const final = [...props.newTweets.concat(tweetsInit)];\n        if (final.length !== tweets.length) {\n            setTweets(final)\n        }\n\n    }, [props.newTweets, tweets, tweetsInit]);\n\n    useEffect(() => {\n        if (tweetsDidSet === false) {\n            const handleTweetListLookup = (response, status) => {\n                if (status === 200) {\n                    setTweetsInit(response);\n                    setTweetsDidSet(true)\n                } else {\n                    console.log(response);\n                    alert(\"There was an error\")\n                }\n            };\n            apiTweetList(props.username, handleTweetListLookup)\n\n        }\n\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\n\n    // Update both states to work with create tweet and retweet\n    const handleDidRetweet = (newTweet) => {\n        const updateTweetsInit = [...tweetsInit];\n        updateTweetsInit.unshift(newTweet);\n        setTweetsInit(updateTweetsInit);\n        const updateFinalTweets = [...tweets];\n        updateFinalTweets.unshift(tweets);\n        setTweets(updateFinalTweets)\n\n    };\n\n    return tweets.map((item, index) => {\n        return <Tweet\n            tweet={item}\n            didRetweet={handleDidRetweet}\n            className='my-5 py-5 border bg-white text-dark'\n            key={`${index} - ${item.id}`}/>\n    })\n}","import React from \"react\";\nimport {apiTweetCreate} from \"./lookup\";\n\nexport function TweetCreate(props) {\n    const textAreaRef = React.createRef();\n    const {didTweet} = props;\n\n    const handleBackendUpdate = (response, status) => {\n        // backend api response handler\n        if (status === 201) {\n            didTweet(response)\n\n        } else {\n            console.log(response);\n            alert(\"An error occurred. Please try again.\")\n        }\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const newVal = textAreaRef.current.value;\n\n        // backend api request\n        apiTweetCreate(newVal, handleBackendUpdate);\n\n        textAreaRef.current.value = ' '\n    };\n\n    return <div className={props.className}>\n        <form onSubmit={handleSubmit}>\n             <textarea ref={textAreaRef} required={true} className={'form-control'} name={'tweet'}>\n\n            </textarea>\n            <button type={'submit'} className={'btn btn-primary my-3'}>Tweet</button>\n\n        </form>\n    </div>\n}\n","import React, {useEffect, useState} from \"react\";\nimport {apiTweetDetail} from \"./lookup\";\nimport {TweetsList} from \"./list\";\nimport {TweetCreate} from \"./create\";\nimport {Tweet} from \"./detail\";\n\nexport function TweetsComponent(props) {\n\n    const [newTweets, setNewTweets] = useState([]);\n\n    const canTweet = props.canTweet === 'false' ? false : true;\n\n    const handleBackendUpdate = (response, status) => {\n        // backend api response handler\n        let tempNewTweets = [...newTweets];\n        tempNewTweets.unshift(response);\n        setNewTweets(tempNewTweets)\n    };\n\n    return <div className={props.className}>\n        {canTweet === true &&\n        <TweetCreate didTweet={handleBackendUpdate} className={'col-12 mb-3'}/>}\n        {/*pass all props from this component*/}\n        <TweetsList newTweets={newTweets} {...props}/>\n\n    </div>\n}\n\nexport function TweetDetailComponent(props) {\n    const {tweetId} = props;\n    const [didLookup, setDidLookup] = useState(false);\n    const [tweet, setTweet] = useState(null)\n\n\n    const handleBackendLookup = (response, status) => {\n        if(status === 200) {\n            setTweet(response)\n        } else {\n            alert(\"There was an error finding your tweet.\")\n        }\n    };\n\n    useEffect(() => {\n        if (didLookup === false) {\n            apiTweetDetail(tweetId, handleBackendLookup);\n            setDidLookup(true)\n        }\n\n    }, [tweetId, didLookup, setDidLookup]);\n\n    return tweet === null ? null : <Tweet tweet={tweet} className={props.className}/>\n\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from \"./tweets\";\n\n\nfunction App() {\n\n    return (\n        <div>\n            <TweetsComponent/>\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    <p>\n                        Edit <code>src/App.js</code> and save to reload.\n                    </p>\n\n                    <a\n                        className=\"App-link\"\n                        href=\"https://reactjs.org\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        Learn React\n                    </a>\n                </header>\n            </div>\n        </div>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {TweetsComponent, TweetDetailComponent} from \"./tweets\";\n\nconst appEl = document.getElementById('root');\nif(appEl) {\n    ReactDOM.render(<App/>, appEl);\n}\n\n// this way we pass all dataset elements to props, not just 1 by 1\nconst e = React.createElement;\nconst tweetsEl = document.getElementById('tweetme');\nif(tweetsEl) {\n    ReactDOM.render(e(TweetsComponent, tweetsEl.dataset), tweetsEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-detail\");\ntweetDetailElements.forEach(container => {\n         ReactDOM.render(e(TweetDetailComponent, container.dataset), container);\n\n});\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}